import re


def capitalize_sentences(text):
    """
    Capitalize the first letter of the text and the first letter after sentence-ending punctuation.
    """
    text = text.strip()
    if not text:
        return text

    # Capitalize the first letter of the text
    text = text[0].upper() + text[1:]

    # Capitalize the first letter after sentence-ending punctuation.
    def capitalize_match(match):
        return match.group(0)[0] + ' ' + match.group(1).upper()

    text = re.sub(r'([.!?])\s+([a-z])', capitalize_match, text)

    return text


def normalize_caption(tokens):
    """
    Normalize a caption generated by an image captioning model.

    This function performs:
    - Joining tokens into a well-formatted sentence
    - Handling opening/closing quotation marks
    - Removing extra whitespace around punctuation and brackets
    - Ensuring correct spacing for natural-looking English sentences

    Args:
        tokens (list of str): List of tokens (e.g., output from a model)

    Returns:
        str: Cleaned and normalized caption
    """

    result = []
    quote_open = False  # Tracks whether we're inside double quotes
    apostrophe_open = False  # Tracks whether we're inside single quotes (optional)

    for token in tokens:
        if token == '"':
            # Alternate between opening and closing quotes
            if quote_open:
                # Closing quote: attach to previous token
                if result:
                    result[-1] += '"'
            else:
                # Opening quote: keep as a separate token
                result.append('"')
            quote_open = not quote_open

        elif token == "'":
            # Similar treatment for single quote, though apostrophes may be part of words
            if apostrophe_open:
                if result:
                    result[-1] += "'"
            else:
                result.append("'")
            apostrophe_open = not apostrophe_open

        elif token in [')', ']', '}']:
            # Closing brackets: attach directly to previous token
            if result:
                result[-1] += token

        elif token in ['(', '[', '{']:
            # Opening brackets: keep as a separate token
            result.append(token)

        else:
            # Normal word/token
            result.append(token)

    # Join all tokens with a space
    sentence = ' '.join(result)

    # Fix spacing before punctuation marks
    sentence = re.sub(r'\s+([,.!?;:])', r'\1', sentence)

    # Fix spacing before closing brackets: ), ], }
    sentence = re.sub(r'\s+([\)\]\}])', r'\1', sentence)

    # Fix spacing after opening brackets: (, [, {
    sentence = re.sub(r'([\(\[\{])\s+', r'\1', sentence)

    # Fix spacing before and after quotation marks
    sentence = re.sub(r'\s+([\'"])', r'\1', sentence)
    sentence = re.sub(r'([\'"])\s+', r'\1', sentence)

    # Trim leading/trailing whitespace
    sentence = sentence.strip()

    # Capitalize the first letter of each sentence
    sentence = capitalize_sentences(sentence)

    return sentence